{"version":3,"sources":["EmoteeCard.js","FetchApi.js","MainScreen.js","TwitchEmotee.js","BttvEmotee.js","CustomEmotee.js","App.js","index.js"],"names":["EmoteeCard","type","imgid","imgName","imgCode","ext","category","useState","setCopied","copyToClipBoard","code","a","navigator","clipboard","writeText","readText","text","console","log","top","className","onClick","src","alt","classname","twitchGlobalEmotes","bttvEmotes","customEmotes","NTHelper","fetch","args","Promise","resolve","reject","then","response","json","status","Custom","data","emotes","emote","w","id","cat","Twitch","lastUpdate","Date","now","match","toLowerCase","BTTV","MainScreen","props","Instagram","fontSize","Facebook","GitHub","Twitter","LinkedIn","TwitchEmotee","checkData","twitchemotes","setTwitchemotes","searchValue","setSearchValue","getTwitchEmotee","result","useEffect","value","onChange","event","input","target","filtered","Object","entries","filter","twitch","includes","twitchSearch","map","twitchemote","BttvEmotee","bttvemotees","setBttvemotees","bttvSearchEmotee","setBttvSearchEmotee","getBTTVEmotee","bttv_2","bttv","bttvSearch","d","findSearch","bttvname","CustomEmotee","customEmotee","setCustomEmotee","customSearchEmotee","setCustomSearchEmotee","getCustomEmotee","custom_2","custom","customSearch","App","setCheckBttv","checktwitch","setCheckTwitch","checkcustom","setCheckCustom","checkcustomData","setCheckCustomData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f08cae77.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './EmoteeCard.css'\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport Pulse from 'react-reveal/Pulse';\r\n\r\nfunction EmoteeCard({type,imgid,imgName,imgCode,ext,category}) {\r\n    const [copied, setCopied] = useState(false)\r\n    \r\n    const copyToClipBoard = async(code) => {\r\n        try {\r\n            await navigator.clipboard.writeText(imgName);\r\n            setCopied(true);\r\n            const text = await navigator.clipboard.readText();\r\n            console.log('Pasted text: ', text);\r\n          } catch (err) {   \r\n            setCopied(false);\r\n          }\r\n    }\r\n    return (\r\n        <Pulse top>\r\n\r\n        <div className = \"card\" onClick = {copyToClipBoard}  >\r\n            <div className = \"card__image\">\r\n                {\r\n                    type === \"twitch\" ? (<img className=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\"  src={`https://static-cdn.jtvnw.net/emoticons/v1/${imgid}/3.0`} alt = \"amotee\"/> ) :\r\n                   type === \"custom\" ? (<img classname=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\"  src={`https://cdn.jsdelivr.net/gh/bhavita/YTStreamChat/assets/emotes/${category}/${imgid}.${ext}`} />)\r\n                    :(<img className=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\"  src={`https://cdn.betterttv.net/emote/${imgid}/3x`} alt = \"amotee\"/>  )           \r\n         \r\n\r\n                }\r\n\r\n            </div>\r\n            <div className = \"card__name\" >\r\n                <div className = \"card__name__copy\" onClick = {copyToClipBoard}>\r\n                    <h4>{imgCode}</h4>\r\n                    <FileCopyOutlinedIcon className = \"copy__icon\" />\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n        </Pulse>    \r\n        );\r\n}\r\n\r\nexport default EmoteeCard;","\r\n\r\nlet twitchGlobalEmotes = {};\r\nlet bttvEmotes = {};\r\nlet customEmotes = {}\r\n\r\n\r\nlet NTHelper = {\r\n\tfetch(...args) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tfetch(...args) .then((response) => {\r\n\t\t\t\tresponse.json().then((json) => {\r\n\t\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\t\tresolve(json);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treject(json);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n}\r\n/*\r\nfunction replaceText(text)  {\r\n    let split = text.split(' ');\r\n    let newText = [];\r\n    for (let word of split) {\r\n        let sword = word.toLowerCase();\r\n        if (bttvEmotes[sword]) {\r\n            word = '<img class=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\" style=\"vertical-align: middle;\twidth: 32px; height: 32px;margin: -1px 2px 1px;\" src=\"https://cdn.betterttv.net/emote/' + bttvEmotes[sword] + '/1x\" alt=\"' + word + '\" title=\"' + word + '\" />';\r\n        }\r\n        else if (twitchGlobalEmotes[sword]) {\r\n            word = '<img class=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\" style=\"vertical-align: middle;\twidth: 32px; height: 32px;margin: -1px 2px 1px;\" src=\"https://static-cdn.jtvnw.net/emoticons/v1/' + twitchGlobalEmotes[sword] + '/1.0\" alt=\"' + word + '\" title=\"' + word + '\" />';\r\n        } else if(customEmotes[sword]){\r\n                let customEmote = customEmotes[sword];\r\n                word = '<img class=\"emote-chat emoji yt-formatted-string style-scope yt-live-chat-text-message-renderer\" style=\"vertical-align: middle;\twidth: 32px; height: 32px;margin: -1px 2px 1px;\" src=\"https://cdn.jsdelivr.net/gh/bhavita/YTStreamChat/assets/emotes/' + customEmote.cat + \"/\" +  customEmote.id + \".\" + customEmote.ext  + '\" alt=\"' + word + '\" title=\"' + word + '\" />';\r\n        }\r\n\r\n        newText.push(word);\r\n    }\r\n\r\n    return newText.join(' ');\r\n}*/\r\n\r\nlet SYNC_THRESHOLD = 7200000; //1000*60*60*2\r\n\r\nfunction Custom () {\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\r\n\t\t\tNTHelper.fetch('https://raw.githubusercontent.com/bhavita/YTStreamChat/main/assets/dictionary.json').then((data) => {\r\n\r\n\t\t\t\tif(data && data.emotes){\r\n\t\t\t\t\tfor(let emote of data.emotes){\r\n\t\t\t\t\t\tlet w = {\r\n\t\t\t\t\t\t\t\"id\" :  emote.id,\r\n\t\t\t\t\t\t\t\"ext\" : emote.ext,\r\n\t\t\t\t\t\t\t\"cat\" : emote.cat\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcustomEmotes[emote.code] = w;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n                console.log(customEmotes)\r\n                resolve(customEmotes)\r\n\r\n\t\t\t\t//chrome.storage.local.set({ customEmotes: customEmotes}, () => resolve()); \r\n\t\t\t});\r\n\r\n        })\r\n\t\r\n};\r\n\r\nfunction  Twitch  () {\r\n  \r\n        return new Promise((resolve) => {\r\n         \r\n               NTHelper.fetch('https://api.twitchemotes.com/api/v4/channels/0').then((data) => {\r\n                   Twitch.lastUpdate = Date.now();\r\n                   for (let emote of data.emotes) {\r\n                       if (emote.code.match(/^[a-zA-Z0-9]+$/)) {\r\n                           twitchGlobalEmotes[emote.code.toLowerCase()] = emote.id;\r\n                       }\r\n                   }\r\n                   //chrome.storage.local.set({ globalTwitchEmotes: twitchGlobalEmotes }, () => resolve());\r\n                   resolve(twitchGlobalEmotes)\r\n\r\n               })\r\n\r\n          \r\n\r\n       });\r\n};\r\n\r\n\r\nfunction BTTV() {\r\n   \r\n    // const fetchTopEmotes = () =>{\r\n    //     return new Promise((resolve) => {\r\n    //         var noBttv = typeof bttvEmotes === 'undefined' || bttvEmotes.length == 0;\r\n    //         if(noBttv){\r\n    //             bttvEmotes = items.bttvEmotes || {};\r\n    //         }\r\n\r\n    //         if (noBttv || Date.now() - BTTV.lastUpdateTopEmotes > SYNC_THRESHOLD) {\r\n    //             return NTHelper.fetch('https://api.betterttv.net/3/emotes/shared/top?offset=0&limit=100').\r\n    //                 then((data) => {\r\n    //                 for (let d of data) {\r\n    //                     let emote = d.emote;\r\n    //                     bttvEmotes[emote.code.toLowerCase()] = emote.id;\r\n    //                 }\r\n    //             }).finally(() => {\r\n    //                 BTTV.lastUpdateTopEmotes = Date.now();\r\n    //                 chrome.storage.local.set({bttvEmotes :  bttvEmotes }, () => resolve());\r\n    //             });\r\n    //         }\r\n    //         else {\r\n    //             resolve();\r\n    //         }\r\n    //     });\r\n    // },\r\n\r\n\r\n        return new Promise((resolve) => {\r\n            \r\n                return NTHelper.fetch('https://api.betterttv.net/3/emotes/shared/top?offset=0&limit=100').\r\n                    then((data) => {\r\n                    for (let d of data) {\r\n                        let emote = d.emote;\r\n                        bttvEmotes[emote.code] = emote.id;\r\n                    }\r\n                    resolve(bttvEmotes);\r\n                })\r\n                \r\n          \r\n        });\r\n\r\n    \r\n\r\n\r\n};\r\n\r\nexport  {Twitch,BTTV,Custom};\r\n\r\n","import React from 'react';\r\nimport {Instagram,Facebook,GitHub,Twitter,LinkedIn} from '@material-ui/icons';\r\nimport './MainScreen.css'\r\nfunction MainScreen(props) {\r\n    return (\r\n        <div className = \"main__screen\">\r\n            <div className = \"main__info\">\r\n            <div className = \"main__title\">\r\n                <h2  >Hi, I am  </h2>\r\n                <h2 className = \"title__effect \">Bhavita</h2>\r\n            </div>\r\n\r\n            <div className = \"text__container\">\r\n                    <h2 className = \"text__effect title__delete\"> Scroll down for more..</h2>\r\n            </div>\r\n            <div className = \"main__icons\">\r\n                {/* <div className = \"container\">\r\n                <Instagram className = \"insta__icon\" fontSize = \"large\"/>\r\n                <div className = \"insta__loader\"></div>\r\n                </div> */}\r\n                <Instagram fontSize = \"large\"/>\r\n\r\n                <Facebook fontSize = \"large\"/>\r\n                <GitHub fontSize = \"large\"/>\r\n                <Twitter fontSize = \"large\"/>\r\n                <LinkedIn fontSize = \"large\"/>\r\n                {/* <div className = \"container\">\r\n                 <Instagram className = \"insta\" fontSize = \"large\"/>\r\n                 </div>\r\n                <Facebook  className = \"fb\"  fontSize = \"large\"/>\r\n                <GitHub  className = \"github\" fontSize = \"large\"/>\r\n                <Twitter className = \"twitter\" fontSize = \"large\"/>\r\n                <LinkedIn  className = \"linkedIn\" fontSize = \"large\"/> */}\r\n            </div>\r\n            {/* <div className = \"main__about\">\r\n                <div className = \"main__about__title\">\r\n                    <h3>About Me</h3>\r\n                </div>\r\n                <div className = \"main__about__content\">\r\n               <p> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. If you like this theme and want to use it for yourself, checkout the source code and the documentation at Github. You can also find me on JAMstack Themes and on Jekyll Themes.</p>\r\n                </div>\r\n            </div> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainScreen;","import React, { useEffect, useState } from 'react';\r\nimport EmoteeCard from './EmoteeCard';\r\nimport { Twitch } from './FetchApi';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Fade from 'react-reveal/Fade';\r\n\r\nimport './TwitchEmotee.css'\r\nfunction TwitchEmotee({checkData}) {\r\nconst [twitchemotes, setTwitchemotes] = useState([])\r\nconst [searchValue, setSearchValue] = useState(\"\")\r\n\r\n    const getTwitchEmotee =async () => {\r\n        await Twitch().then(result => Twitch())\r\n         .then(result=>{\r\n           setTwitchemotes(result)\r\n         })\r\n         console.log(twitchemotes)\r\n     }\r\n     \r\n     const findSearch = (event) => {\r\n        const input = event.target.value;\r\n      const filtered = Object.entries(twitchemotes).filter(twitch => {\r\n        return twitch[0].toLowerCase().includes(input.toLowerCase())\r\n      })\r\n   \r\n      let twitchSearch = {}\r\n      for (let emote of filtered) {\r\n        if (emote[0].match(/^[a-zA-Z0-9]+$/)) {\r\n            twitchSearch[emote[0].toLowerCase()] = emote[1];\r\n        }\r\n    }\r\n     setSearchValue(input)\r\n     setTwitchemotes(twitchSearch)\r\n    }\r\n    useEffect(() => {\r\n       getTwitchEmotee();\r\n       twitchemotes?checkData(true) : checkData(false)\r\n    }, [])\r\n    return (\r\n        <div className = \"twitch__emotees__screen\">\r\n            <div className = \"twitch__search\">\r\n            <input value = {searchValue} onChange = {findSearch } />\r\n            <SearchIcon className = \"search__icon\" />\r\n            </div>\r\n          \r\n            <div className = \"emotees__cards\">\r\n            {\r\n            Object.entries(twitchemotes).map(([twitchemote,id]) => {\r\n              return(\r\n              <EmoteeCard  \r\n              type = \"twitch\"\r\n              imgid = {id}\r\n              imgName = {twitchemote}\r\n              imgCode =\r\n                {twitchemote}\r\n              />\r\n              )}) \r\n            }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TwitchEmotee;","import React, { useEffect, useState } from 'react';\r\nimport EmoteeCard from './EmoteeCard';\r\nimport { BTTV } from './FetchApi';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport './TwitchEmotee.css'\r\nfunction BttvEmotee() {\r\nconst [bttvemotees, setBttvemotees] = useState([])\r\nconst [bttvSearchEmotee, setBttvSearchEmotee] = useState([])\r\n\r\n\r\nconst [searchValue, setSearchValue] = useState(\"\")\r\n\r\n    const getBTTVEmotee =async () => {\r\n\r\n        await BTTV().then(result => BTTV())\r\n         .then(result=>{\r\n           setBttvemotees(result)\r\n         })\r\n     }\r\n     \r\n     const findSearch = (input) => {\r\n        setSearchValue(input)\r\n        console.log(input)\r\n        const bttv_2 = bttvemotees;\r\n        console.log(bttv_2)\r\n\r\n        const filtered = Object.entries(bttv_2).filter(bttv => {\r\n          return bttv[0].toLowerCase().includes(input.toLowerCase())\r\n        })\r\n     \r\n        let bttvSearch = {}\r\n        for (let d of filtered) {\r\n         let emote = d[0];\r\n         bttvSearch[emote] = d[1];\r\n     }\r\n       setBttvSearchEmotee(bttvSearch)\r\n    }\r\n    useEffect(() => {\r\n        getBTTVEmotee();\r\n    }, [])\r\n    return (\r\n        <div className = \"twitch__emotees__screen\">\r\n            <div className = \"twitch__search\">\r\n            <input value = {searchValue} onChange = {(event)=>findSearch(event.target.value) } />\r\n            <SearchIcon className = \"search__icon\" />\r\n            </div>\r\n            \r\n            <div className = \"emotees__cards\">\r\n\r\n            {\r\n          Object.entries(searchValue?bttvSearchEmotee : bttvemotees).map(([bttvname,id]) => {\r\n            return(\r\n            <EmoteeCard  \r\n            type = \"bttv\"\r\n            imgid = {id}\r\n            imgName = {bttvname}\r\n            imgCode =\r\n              {bttvname}\r\n            />\r\n            )\r\n            \r\n          })\r\n            }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BttvEmotee;","import React, { useEffect, useState } from 'react';\r\nimport EmoteeCard from './EmoteeCard';\r\nimport { Custom } from './FetchApi';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport './TwitchEmotee.css'\r\nfunction CustomEmotee() {\r\nconst [customEmotee, setCustomEmotee] = useState([])\r\nconst [customSearchEmotee, setCustomSearchEmotee] = useState([])\r\n\r\n\r\nconst [searchValue, setSearchValue] = useState(\"\")\r\n\r\n    const getCustomEmotee =async () => {\r\n\r\n        await Custom().then(result => Custom())\r\n         .then(result=>{\r\n           setCustomEmotee(result)\r\n         })\r\n     }\r\n     \r\n     const findSearch = (input) => {\r\n        setSearchValue(input)\r\n        console.log(input)\r\n        const custom_2 = customEmotee;\r\n\r\n        const filtered = Object.entries(custom_2).filter(custom => {\r\n          return custom[0].toLowerCase().includes(input.toLowerCase())\r\n        })\r\n        console.log(filtered)\r\n        let customSearch = {}\r\n        for(let emote of filtered){\r\n          let w = {\r\n            \"id\" :  emote[1].id,\r\n            \"ext\" : emote[1].ext,\r\n            \"cat\" : emote[1].cat\r\n          }\r\n\r\n          customSearch[emote[0]] = w;\r\n        }\r\n       setCustomSearchEmotee(customSearch)\r\n    }\r\n    useEffect(() => {\r\n        getCustomEmotee();\r\n    }, [])\r\n    return (\r\n        <div className = \"twitch__emotees__screen\">\r\n            <div className = \"twitch__search\">\r\n            <input value = {searchValue} onChange = {(event)=>findSearch(event.target.value) } />\r\n            <SearchIcon className = \"search__icon\" />\r\n            </div>\r\n            \r\n            <div className = \"emotees__cards\">\r\n            {\r\n          Object.entries(searchValue?customSearchEmotee : customEmotee).map(([customEmotee,value]) => {\r\n              \r\n            return(\r\n            <EmoteeCard  \r\n            type = \"custom\"\r\n            imgid = {value.id}\r\n            imgName = {customEmotee}\r\n            imgCode =\r\n              {customEmotee}\r\n              ext = {value.ext}\r\n                category = {value.cat}\r\n            />\r\n            )\r\n            \r\n          })\r\n            }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomEmotee;","import { useEffect, useState } from 'react';\nimport './App.css';\nimport EmoteeCard from './EmoteeCard';\nimport {BTTV,Twitch,Custom} from './FetchApi'\nimport SearchIcon from '@material-ui/icons/Search';\nimport {Autocomplete} from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport MainScreen from './MainScreen';\nimport TwitchEmotee from './TwitchEmotee';\nimport BttvEmotee from './BttvEmotee';\nimport CustomEmotee from './CustomEmotee'\nimport {Instagram,Facebook,GitHub,Twitter,LinkedIn} from '@material-ui/icons';\nimport Slide from 'react-reveal/Slide';\n\nconst options = [\n  { id: 0, value: \"foo\" },\n  { id: 1, value: \"goo\" },\n];\n\nfunction App() {\n \n  const [checkBttv, setCheckBttv] = useState(false)\n  const [checktwitch, setCheckTwitch] = useState(false)\n  const [checkcustom, setCheckCustom] = useState(false)\n  const [checkcustomData, setCheckCustomData] = useState(true)\n\n\n\n  const setTwitch = () =>{\n    setCheckTwitch(true)  \n    setCheckBttv(false)  \n    setCheckCustom(false)\n\n  }\n\n  const setBTTV = () =>{\n    setCheckTwitch(false)  \n    setCheckBttv(true)  \n    setCheckCustom(false)\n\n  }\n\n  const setCustom = () =>{\n    setCheckTwitch(false)  \n    setCheckBttv(false)  \n    setCheckCustom(true)\n\n  }\n\n\n  \n\n \n  // useEffect(() => {\n  //   checkBttv == true? getBTTVEmotee() :  custom == true ? getCustomEmotee() :  getTwitchEmotee()\n  \n  // }, [searchValue])\n  return (\n    <div className=\"App\">\n      <div className = \"app__screen\">\n      <MainScreen/>\n\n      </div>\n      <div className = \"app__screen__about\">\n      <div className = \"main__about__title\">\n                    <h3>About Me</h3>\n                </div>\n                <Slide top>\n\n                <div className = \"main__about__content\">\n               <p> Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. If you like this theme and want to use it for yourself, checkout the source code and the documentation at Github. You can also find me on JAMstack Themes and on Jekyll Themes.</p>\n                </div>\n                </Slide>\n      </div>\n      <div className = \"app__emotees__section\">\n                    <h3 className = \"app__emotees__section__title\">EMOTEELY</h3>\n                <div className = \"app__emotees__tabs\">\n                  <h3 className = \"app__emotees__tabs__single\" onClick = {setBTTV} >BTTV EMOTTEES</h3>\n               { checkcustomData?<h3 className = \"app__emotees__tabs__single\" onClick = {setTwitch}>TWITCH EMOTTEES</h3> : <></>}\n                  <h3 className = \"app__emotees__tabs__single\" onClick = {setCustom  } >CUSTOM EMOTTEES</h3>\n                \n\n                </div>\n              \n                   {\n                    checkcustom?<CustomEmotee/>: checktwitch?<TwitchEmotee checkData = {setCheckCustomData}/>:<BttvEmotee/>\n                  } \n                  \n                \n              \n      </div>\n      <div className = \"contact\">\n        <h2>Contact</h2>\n        <p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. If you like this theme and want to use it for yourself, checkout the source code and the documentation at Github.</p>\n        <div className = \"contact__icons\">\n                <Instagram className = \"insta\" fontSize = \"large\"/>\n                <Facebook  className = \"fb\"  fontSize = \"large\"/>\n                <GitHub  className = \"github\" fontSize = \"large\"/>\n                <Twitter className = \"twitter\" fontSize = \"large\"/>\n                <LinkedIn  className = \"linkedIn\" fontSize = \"large\"/>\n            </div>\n      </div>\n     \n       \n\n      \n     \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}